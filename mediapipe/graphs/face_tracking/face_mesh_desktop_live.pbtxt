# MediaPipe graph that performs face mesh with TensorFlow Lite on CPU.

# CPU buffer. (ImageFrame)
input_stream: "input_video"

# Output image with rendered results. (ImageFrame)
output_stream: "output_video"
# Detected faces. (std::vector<Detection>)
# output_stream: "face_detections"
# Max number of faces to detect/track. (int)
input_side_packet: "num_faces"

# Throttles the images flowing downstream for flow control. It passes through
# the very first incoming image unaltered, and waits for downstream nodes
# (calculators and subgraphs) in the graph to finish their tasks before it
# passes through another image. All images that come in while waiting are
# dropped, limiting the number of in-flight images in most part of the graph to
# 1. This prevents the downstream nodes from queuing up incoming images and data
# excessively, which leads to increased latency and memory usage, unwanted in
# real-time mobile applications. It also eliminates unnecessarily computation,
# e.g., the output produced by a node may get dropped downstream if the
# subsequent nodes are still busy processing previous inputs.
node {
  calculator: "FlowLimiterCalculator"
  input_stream: "input_video"
  input_stream: "FINISHED:output_video"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_input_video"
}

node {
     calculator: "FaceLandmarkFrontCpu"
     input_stream: "IMAGE:throttled_input_video"
     #input_side_packet: "NUM_FACES:num_faces"
     output_stream: "LANDMARKS:multi_face_landmarks"
   }
node {
  calculator: "BeginLoopNormalizedLandmarkListVectorCalculator"
  input_stream: "ITERABLE:multi_face_landmarks"
  output_stream: "ITEM:face_landmarks"
  output_stream: "BATCH_END:landmark_timestamp"
}
node {
  calculator: "FaceLandmarksToRenderDataCalculator"
  input_stream: "NORM_LANDMARKS:face_landmarks"
  output_stream: "RENDER_DATA:landmarks_render_data"
  node_options: {
    [type.googleapis.com/mediapipe.LandmarksToRenderDataCalculatorOptions] {
          landmark_color { r: 255 g: 0 b: 0 }
          connection_color { r: 0 g: 255 b: 0 }
          thickness: 2
          visualize_landmark_depth: false
        }
  }
}
node {
  calculator: "EndLoopRenderDataCalculator"
  input_stream: "ITEM:landmarks_render_data"
  input_stream: "BATCH_END:landmark_timestamp"
  output_stream: "ITERABLE:multi_face_landmarks_render_data"
}

# Draws annotations and overlays them on top of the input images.
node {
  calculator: "AnnotationOverlayCalculator"
  input_stream: "IMAGE:throttled_input_video"
  input_stream: "VECTOR:0:multi_face_landmarks_render_data"
  output_stream: "IMAGE:output_video"
}

